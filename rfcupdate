#!/usr/bin/env python3
"""rfcupdate -- update local RFC tree from online database"""

__author__ = 'Gleb N. Semenov'
__copyright__ = '(c) 2015-2020'
__version__ = '3.0.1'

import os
import argparse
import re
import ftplib
from subprocess import call

INDEX_LIST = ['rfc-index.txt',
              'bcp-index.txt',
              'fyi-index.txt',
              'rfc-index-latest.txt',
              'rfc-ref.txt',
              'std-index.txt']

EXT_LIST = ['txt', 'pdf']

RFCDIG=4

def num2string(num):
    return '%0{}d'.format(RFCDIG) % num

def num2rfc(num, ext=None):
    if ext is None:
        return 'rfc%0{}d'.format(RFCDIG) % num
    else:
        return 'rfc%0{}d.{}'.format(RFCDIG, ext) % num

class CFtpGetter(object):
    """FTP getter"""
    def __init__(self, ftpdir, server, user, password):
        self.ftpc = ftplib.FTP(server, user, password)
        self.ftpc.cwd(ftpdir)

    def __del__(self):
        """destructor"""
        self.ftpc.quit()

    def get_file(self, rfc_root, remote_name, local_name=None):
        """retrive file from FTP server"""
        if local_name is None:
            fname = os.path.join(rfc_root, remote_name)
        else:
            fname = os.path.join(rfc_root, local_name)
        lfd = open(fname, 'wb')

        def printdot_callback(block):
            """local lfd.write wrapper to draw block read indicator"""
            lfd.write(block)
            print('.', end='')

        self.ftpc.retrbinary('RETR ' + remote_name, printdot_callback)
        lfd.close()

    def get_rfcset(self, rfc_root, number):
        """retrive rfcNNNN.*"""
        for ext in EXT_LIST:
            remote_name = 'rfc{}.{}'.format(number, ext)
            local_name = num2rfc(number, ext)
            try:
                remote_size = self.get_remote_size(remote_name)
                if remote_size is None:
                    continue # file does not exist
                print('{}({}) -> {}'.format(remote_name, remote_size, local_name), end='')
                self.get_file(rfc_root, remote_name, local_name)
                print('')
            except ftplib.error_perm:
                continue # file does not exist

    def get_remote_size(self, fname):
        """return the size of file on FTP server's side'"""
        return  self.ftpc.size(fname)

class CRfcDirectory(object):
    """RFC directory parser, and file manipulator"""
    def __init__(self, rfc_root):
        self.rfc_root = rfc_root
        self.num_ondisk = []
        regex = rf'rfc(\d{{{RFCDIG}}})'
        fmask = re.compile(regex)
        for _, _, files in os.walk(rfc_root):
            for filename in filter(fmask.match, files):
                self.num_ondisk.append(int(re.search(regex, filename).group(1)))
        self.num_ondisk.sort()

    def num_present(self, num):
        """true if the rfc number is present on disk"""
        return num in self.num_ondisk

    def getmax(self):
        """return maximum number of RFC present on disk"""
        return self.num_ondisk[-1]

    def store_file(self, num):
        """store file from RFC root fir to the proper subdirectory"""
        dirname = os.path.join(self.rfc_root, num2rfc(num - num % 100))
        if not os.path.exists(dirname):
            print('Creating {}'.format(dirname))
            os.makedirs(dirname)
        for ext in EXT_LIST:
            rfc_name = num2rfc(num, ext)
            stored_name = os.path.join(dirname, rfc_name)
            received_name = os.path.join(self.rfc_root, rfc_name)
            if os.path.isfile(received_name):
                os.rename(received_name, stored_name)
                call(['xz', stored_name])
                print('{} -> {}.xz'.format(received_name, stored_name))

    def getlist(self):
        """return list of rfc numbers present on disk"""
        return self.num_ondisk

class CRfcIndex(object):
    """RFC index parser"""
    def __init__(self, rfc_index, rfc_root):
        self.index_file = os.path.join(rfc_root, rfc_index)
        rex = rf'^(\d{{{RFCDIG}}})'
        rex_notissued = rf'^(\d{{{RFCDIG}}}) Not Issued.'
        rex_mask = re.compile(rex)
        rex_notissued_mask = re.compile(rex_notissued)

        self.nums_present = [int(re.search(rex, line).group(1))
                             for line in filter(rex_mask.match,
                                                open(self.index_file))]

        self.not_issued = [int(re.search(rex_notissued, line).group(1))
                           for line in filter(rex_notissued_mask.match,
                                              open(self.index_file))]
        self.nums_present.sort()
        self.not_issued.sort()

    def num_present(self, num):
        """true if the rfc number is present in index"""
        return num in self.nums_present

    def getmax(self):
        """return maximum number of RFC present in index"""
        return self.nums_present[-1]

    def getlist(self):
        """return RFC index list"""
        return self.nums_present

    def num_notissued(self, num):
        """true if the RFC num was never issued"""
        return num in self.not_issued

    def append(self, num):
        """append element to list"""
        self.nums_present.append(num)

    def sort(self):
        """Sort index"""
        self.nums_present.sort()

class CRfcReference(object):
    """RFC reference parser"""
    def __init__(self, rfc_reference, rfc_root):
        self.rfc_root = rfc_root
        self.reference_file = os.path.join(rfc_root, rfc_reference)
        rex = rf'^RFC(\d{{{RFCDIG}}})'
        rex_mask = re.compile(rex)

        self.nums_present = [int(re.search(rex, line).group(1))
                             for line in filter(rex_mask.match,
                                                open(self.reference_file))]
        self.nums_present.sort()

    def num_present(self, num):
        """true if the rfc number is present in index"""
        return num in self.nums_present

    def getlist(self):
        """return RFC reference list"""
        return self.nums_present

    def getmax(self):
        """return maximum number of RFC present in index"""
        return self.nums_present[-1]

def toss_received(arg, r_idx=None, r_dir=None):
    """move just stored files to the proper directories"""
    rfcidx = r_idx or CRfcIndex('rfc-index.txt', arg.rfcdir)
    rfcdir = r_dir or CRfcDirectory(arg.rfcdir)
    if r_idx is None:
        rfcref = CRfcReference('rfc-ref.txt', arg.rfcdir)
        for num in rfcref.getlist():
            if not rfcidx.num_present(num):
                rfcidx.append(num)
        rfcidx.sort()
        del rfcref

    for i in range(1, rfcidx.getmax()+1):
        rfcdir.store_file(i)
    if r_idx is None:
        del rfcdir
    if r_dir is None:
        del rfcidx

def print_absent(arg):
    """print list of absent RFC numbers"""
    rfcidx = CRfcIndex('rfc-index.txt', arg.rfcdir)
    rfcref = CRfcReference('rfc-ref.txt', arg.rfcdir)
    rfcdir = CRfcDirectory(arg.rfcdir)
    maxnum = max(rfcidx.getmax(), rfcdir.getmax(), rfcref.getmax())
    for i in range(1, maxnum + 1):
        idx_present = rfcidx.num_present(i)
        dir_present = rfcdir.num_present(i)
        ref_present = rfcref.num_present(i)

        if rfcidx.num_notissued(i):
            continue

        if dir_present:
            if idx_present and ref_present:
                continue
            elif idx_present:
                fmt = 'r?? {}'
            elif ref_present:
                fmt = 'i?? {}'
            else:
                fmt = '??? {}'
        elif idx_present or ref_present:
            fmt = 'ftp {}'
        else:
            fmt = '    {}'
        print(fmt.format(num2string(i)))

    del rfcdir
    del rfcidx
    del rfcref

def create_notissued(rfcroot, num):
    """create file for never issued RFC, and write the 'never issued' note into it"""
    strnum = num2string(num)
    fname = os.path.join(rfcroot, 'rfc{}.txt'.format(strnum))
    lfd = open(fname, 'w')
    lfd.write('RFC {} was never issued.\n'.format(strnum))
    lfd.close()
    print(text)

def update_rfc(arg):
    """setup FTP connection and update files on disk"""
    ftpc = CFtpGetter(arg.dir, arg.server, arg.user, arg.password)

    # update index list
    for index_file in INDEX_LIST:
        if os.path.exists(index_file):
            statinfo = os.stat(os.path.join(arg.rfcdir, index_file))
            local_size = statinfo.st_size
        else:
            local_size = 0
        remote_size = ftpc.get_remote_size(index_file)
        if remote_size != local_size:
            print('{}({} -> {})'.format(index_file, remote_size, local_size), end='')
            ftpc.get_file(arg.rfcdir, index_file)
            print('')
        else:
            print('{}: not needed'.format(index_file))

    rfc_index = CRfcIndex('rfc-index.txt', arg.rfcdir)
    rfc_reference = CRfcReference('rfc-ref.txt', arg.rfcdir)
    rfc_directory = CRfcDirectory(arg.rfcdir)

    for num in rfc_reference.getlist():
        if not rfc_index.num_present(num):
            rfc_index.append(num)
    rfc_index.sort()

    difference = list(set(rfc_index.getlist()) - set(rfc_directory.getlist()))

    if difference:
        for num in difference:
            if rfc_index.num_notissued(num):
                create_notissued(arg.rfcdir, num)
            else:
                ftpc.get_rfcset(arg.rfcdir, num)
        toss_received(arg, rfc_index, rfc_directory)
    del rfc_directory
    del rfc_reference
    del rfc_index
    del ftpc

PARSER = argparse.ArgumentParser(prog='rfcupdate', description='RFC collection updater',
                                 formatter_class=argparse.ArgumentDefaultsHelpFormatter)
PARSER.add_argument('-v', '--version', action='store_true', help='print version number and exit')
PARSER.add_argument('-r', '--rfcdir', default='.', help='set local RFC hierarchy root')
PARSER.add_argument('-s', '--server', default='www.rfc-editor.org', help='set FTP server name')
PARSER.add_argument('-u', '--user', default='ftp', help='set FTP user name')
PARSER.add_argument('-p', '--password', default='ftp', help='set FTP password')
PARSER.add_argument('-d', '--dir', default='in-notes', help='set FTP directory')
PARSER.add_argument('-g', '--rfcdig', type=int, default=RFCDIG, help='count of digits in RFC number')
PARSER.add_argument('command', choices=['absent', 'update', 'toss'],
                    nargs='?', default='update',
                    help='Update local RFC collection or print the absent RFC numbers')
ARGS = PARSER.parse_args()

DISPATCH_TABLE = {
    'absent': print_absent,
    'update': update_rfc,
    'toss':   toss_received
}

if ARGS.version:
    print('{} v{} {}, {}'.format(PARSER.prog, __version__, __copyright__, __author__))
else:
    RFCDIG=ARGS.rfcdig
    DISPATCH_TABLE[ARGS.command](ARGS)
